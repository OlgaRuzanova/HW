{
	"info": {
		"_postman_id": "be20aabc-a748-4a4b-87f1-de2cdac51af2",
		"name": "HW 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							" });\r",
							"\r",
							"    pm.test(\"Body matches string\", function () {\r",
							"        pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"var jsonData = pm.response.json()\r",
							"//Спарсить request\r",
							"var reqBody = request.data\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Test name\", function () {\r",
							"pm.environment.get(\"variable_key\");\r",
							"    pm.expect(jsonData.name).to.eql(\"Olga\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"pm.test(\"Test age\", function () {\r",
							"     pm.expect(jsonData.age).to.eql(\"31\");\r",
							"     });\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"pm.test (\"Test salary\", function (){\r",
							"    pm.expect (jsonData.salary).to.eql(150000)\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test (\"Test request name\", function (){\r",
							"     pm.expect (jsonData.name).to.eql(reqBody.name)\r",
							"   });\r",
							"\r",
							"//Проверить, что age в ответе равно age s request\r",
							"pm.test (\"Test request age\", function () {\r",
							"    pm.expect (jsonData.age).to.eql(reqBody.age)\r",
							"} )\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"pm.test (\"Test request salary\", function (){\r",
							"    pm.expect (jsonData.salary).to.eql(+reqBody.salary)\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"pm.test (\"Rest request salary_1_5_years\",function (){\r",
							"    pm.expect (jsonData.family.u_salary_1_5_year).to.eql(reqBody.salary*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Olga",
							"type": "default"
						},
						{
							"key": "age",
							"value": "31",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "150000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"var resp_JSON = pm.response.json ()\r",
							"\r",
							"//Спарсить request\r",
							"var req_JSON = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test (\"Test name\", function (){\r",
							"   pm.expect(resp_JSON.name).to.eql(req_JSON.name)\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request\r",
							"pm.test (\"Test name\", function () {\r",
							"    pm.expect(resp_JSON.age).to.eql(req_JSON.age)\r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"pm.test (\"Test salary\", function (){\r",
							"    pm.expect(resp_JSON.salary).to.eql(+req_JSON.salary)\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(resp_JSON.family)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test (\"Test dog name\", function(){\r",
							"    pm.expect(resp_JSON.family.pets.dog).to.have.property(\"name\")\r",
							"})\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age\r",
							"pm.test (\"Test dog age\", function (){\r",
							"    pm.expect(resp_JSON.family.pets.dog).to.have.property(\"age\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							"pm.test (\"Test dog name\", function (){\r",
							"    pm.expect(resp_JSON.family.pets.dog[\"name\"]).to.eql(\"Luky\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test (\"Test dog age\", function (){\r",
							"    pm.expect(resp_JSON.family.pets.dog[\"age\"]).to.eql(4)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_3?name=Olga&age=31&salary=150000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "150000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"var respJSON = pm.response.json ()\r",
							"\r",
							"//Спарсить request\r",
							"var reqJSON = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request\r",
							"pm.test(\"Test name\", function (){\r",
							"    pm.expect(respJSON.name).to.eql(reqJSON.name)\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age из request \r",
							"pm.test (\"Test age\", function (){\r",
							"    pm.expect(respJSON.age).to.eql(+reqJSON.age)\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр salary из request\r",
							"console.log (reqJSON.salary)\r",
							"\r",
							"//Вывести в консоль параметр salary из response\r",
							"console.log (respJSON.salary)\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log (respJSON.salary[0])\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(respJSON.salary[1])\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log (respJSON.salary[2])\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request\r",
							"pm.test(\"Test salary 0\", function(){\r",
							"    pm.expect(respJSON.salary[0]).to.eql(+reqJSON.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"pm.test(\"Test salary 1\",function (){\r",
							"    pm.expect(+respJSON.salary[1]).to.eql(reqJSON.salary*2)\r",
							"})\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"pm.test(\"Test salary 2\",function (){\r",
							"    pm.expect(+respJSON.salary[2]).to.eql(reqJSON.salary*3)\r",
							"})\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\",respJSON.name)\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"age\",respJSON.age)\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\",respJSON.salary[0])\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"var k = 0\r",
							"for (var i of respJSON.salary)\r",
							"{console.log (k,'salary = ', i)\r",
							"k++\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Olga&age=31&salary=150000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "150000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Спарсить response body в json\r",
							"var respJSON = pm.response.json()\r",
							"\r",
							"//Спарсить request\r",
							"var reqBody = request.data\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test (\"Test have start_qa_salary\", function (){\r",
							"    pm.expect(respJSON).to.have.property(\"start_qa_salary\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test have qa_salary_after_6_months\", function(){\r",
							"    pm.expect(respJSON).to.have.property(\"qa_salary_after_6_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test (\"Test have qa_salary_after_12_months\", function (){\r",
							"    pm.expect(respJSON).to.have.property(\"qa_salary_after_12_months\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test (\"Test have qa_salary_after_1.5_year\", function(){\r",
							"    pm.expect(respJSON).to.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test have qa_salary_after_3.5_years\", function (){\r",
							"    pm.expect(respJSON).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"})\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test have person\", function(){\r",
							"    pm.expect(respJSON).to.have.property(\"person\")\r",
							"})\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test (\"Test start_qa_salary in request\", function(){\r",
							"    pm.expect(respJSON.start_qa_salary).to.eql(+reqBody.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"Test qa_salary_after_6_months in request\", function (){\r",
							"    pm.expect(respJSON.qa_salary_after_6_months).to.eql(reqBody.salary*2)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_12 in request\", function(){\r",
							"    pm.expect(respJSON.qa_salary_after_12_months).to.eql(reqBody.salary*2.7)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_1.5_year in request\", function(){\r",
							"    pm.expect(respJSON['qa_salary_after_1.5_year']).to.eql(reqBody.salary*3.3)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_3.5_years in request\", function(){\r",
							"    pm.expect(respJSON['qa_salary_after_3.5_years']).to.eql(reqBody.salary*3.8)\r",
							"})\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test person\", function (){\r",
							"    pm.expect(respJSON.person.u_name[1]).to.eql(+reqBody.salary)\r",
							"})\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Test u_age\", function(){\r",
							"    pm.expect(respJSON.person.u_age).to.eql(+reqBody.age)\r",
							"})\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Test u_salary_5_years\", function(){\r",
							"    pm.expect(respJSON.person.u_salary_5_years).to.eql(reqBody.salary*4.2)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
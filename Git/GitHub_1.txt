JSON

 1. Создать внешний репозиторий c названием JSON ===
Перейти на https://github.com и войти в свой аккаунт. 
Нажать кнопку New repository.
На открывшейся странице ввести имя репозитория (JSON), поставить галочку Add a README file
и нажать кнопку Create repository.

 2. Клонировать репозиторий JSON на локальный компьютер ===
В созданном репозитории нажимаем на кнопку Code и  копируем ссылку на репозиторий.
Затем в отдельной папке на компьютере запускаем GitBash и пишем команду git clone и указываем ссылку на репозиторий
( git clone https://github.com/OlgaRuzanova/JSON.git), Enter

 3. Внутри локального JSON создать файл “new.json” === 
cd JSON
touch new.json

 4. Добавить файл под гит === git status = > git add new.json

 5. Закоммитить файл === git commit -m "Create new.json"

 6. Отправить файл на внешний GitHub репозиторий === git push

 7. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON ===
vim new.json
I 
{"name":"Olga",
"surname":"Ruzanova",
"age":"27",
"salary":"1000",
"animals":"1"
}
ESC + : wq + Enter

 8. Отправить изменения на внешний репозиторий === 
git commit -m "Add info in new.json" 
git push

 9. Создать файл preferences.json === touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, страна которую хотели бы посетить) в формате JSON.
vim preferences.json
I 
{"movie":"The Mask",
"series":"Extra",
"food":"burger",
"season":"summer",
"country":"Germany"
}
ESC + : wq + Enter

 10. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON === touch sklls.json
vim sklls.json
I 
{"skills_1":"Тестирование API через Postman",
"skills_2":"Мобильное тестирование",
"skills_3":"Знание SQL",
"skills_4":"Нагрузочное тестирование в Jmeter"
}
ESC + : wq + Enter

 11. Отправить сразу 2 файла на внешний репозиторий === git add . | git commit -m "Create new files"

 12. На веб интерфейсе создать файл bug_report.json.
В нужном репозитории нажимаем Add file - Create new file в названии указываем bug_report.json

 13. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done

 14. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON ===
{
"Название": "Не работает кнопка отправки заказа",

"Как воспроизвести?": {

"1.": "Открыть сайт",

"2.": "Нажать по ссылке *",

"3.": "Пролистать до поля *",

"4.": "Ввести значение в поле *",

"5.": "Попытаться нажать кнопку отправки заказа."
},

"Фактический результат:": "кнопка неактивна",

"Ожидаемый результат:": "кнопка нажимается, можно сделать заказ",
}

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done

 16. Синхронизировать внешний и локальный репозиторий JSON === git pull


XML
 1. Создать внешний репозиторий c названием XML ===
Перейти на https://github.com и войти в свой аккаунт. 
Нажать кнопку New repository.
На открывшейся странице ввести имя репозитория (XML), поставить галочку Add a README file
и нажать кнопку Create repository.

 2. Клонировать репозиторий XML на локальный компьютер ===
В созданном репозитории нажимаем на кнопку Code и  копируем ссылку на репозиторий.
Затем в отдельной папке на компьютере запускаем GitBash и пишем команду git clone и указываем ссылку на репозиторий
(https://github.com/OlgaRuzanova/XML.git), Enter

 3. Внутри локального XML создать файл “new.xml” === 
cd XML
touch new.xml

 4. Добавить файл под гит === git status => git add new.xml

 5. Закоммитить файл === git commit -m "Create new.xml"

 6. Отправить файл на внешний GitHub репозиторий === git push

 7. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
vim new.xml
I
<?xml version="1.0"?>
<information>
    <personal_information>
        <name>Olga</name>
        <surname>Ruzanova</surname>
        <age>27</age>
        <salary>2000$</salary>
        <animals>1</animals>
    </personal_information>
</information>

 ESC + : wq + Enter

 8. Отправить изменения на внешний репозиторий === 
git commit -m "Add info in new.xml"
git push

 9. Создать файл preferences.xml === touch preferences.xml

 10. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
vim preferences.xml
I
<?xml version="1.0"?>
<information>
    <personal_information>
        <movie>The Mask</movie>
        <series>Extra</series>
        <food>burger</food>
        <season>summer</season>
        <country>Germany</country>
    </personal_information>
</information>

 ESC + : wq + Enter

 11. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML === touch sklls.xml
vim sklls.xml
I
<?xml version="1.0" encoding="utf-8"?>
<skills>
    <skills_1>Тестирование API через Postman</skills_1>
    <skills_2>Мобильное тестирование</skills_2>
    <skills_3>Знание SQL</skills_3>
    <skills_4>Нагрузочное тестирование в Jmeter</skills_4>
</skills>

 ESC + : wq + Enter

 12. Сделать коммит в одну строку === git add . | git commit -m "Create new files"

 13. Отправить сразу 2 файла на внешний репозиторий === git push

 14. На веб интерфейсе создать файл bug_report.xml ===
В нужном репозитории нажимаем Add file - Create new file в названии указываем bug_report.xml

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done

 16. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML ===
<?xml version="1.0"?>
<bug report>
 <Name>Не работает кнопка отправки заказа</Name>
  <Steps>
	<1>Открыть сайт"</1>
	<2>Нажать по ссылке</2>
	<3>Пролистать до поля</3>
	<4>Ввести значение в поле</4>
	<5>Попытаться нажать кнопку отправки заказа</5>
</Steps>
<Fact>кнопка неактивна</Fact>
<Result>кнопка нажимается, можно сделать заказ</Result>
</bug report>

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done

 18. Синхронизировать внешний и локальный репозиторий XML === git pull


TXT
 1. Создать внешний репозиторий c названием TXT
Перейти на https://github.com и войти в свой аккаунт. 
Нажать кнопку New repository.
На открывшейся странице ввести имя репозитория (TXT), поставить галочку Add a README file
и нажать кнопку Create repository.

 2. Клонировать репозиторий TXT на локальный компьютер.
В созданном репозитории нажимаем на кнопку Code и  копируем ссылку на репозиторий.
Затем в отдельной папке на компьютере запускаем GitBash и пишем команду git clone и указываем ссылку на репозиторий
(https://github.com/OlgaRuzanova/TXT.git), Enter

 3. Внутри локального TXT создать файл “new.txt”.=== 
cd TXT
touch new.txt

 4. Добавить файл под гит.=== git add new.txt

 5. Закоммитить файл.=== git commit -m "Create new.txt"

 6. Отправить файл на внешний GitHub репозиторий.=== git push

 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 vim new.txt
I
Название: Не работает кнопка отправки заказа.
Как воспроизвести?
1. Открыть сайт *.
2. Нажать по ссылке *.
3. Пролистать до поля *.
4. Ввести значение в поле *.
5. Попытаться нажать кнопку отправки заказа.
Фактический результат: кнопка неактивна.
Ожидаемый результат: кнопка нажимается, можно сделать заказ.
ESC + : wq + Enter

8. Отправить изменения на внешний репозиторий.=== 
git commit -am "Add info in new.txt"
git push

 9. Создать файл preferences.txt === touch preferences.txt

 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 vim preferences.txt
I
любимый фильм - Маска;
любимый сериал - Экстра;
любимая еда - бургеры;
любимое время года - лето;
страна, которую хотели бы посетить - Германия.
 ESC + : wq + Enter

11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT === touch sklls.txt
vim sklls.txt
I 
1.Тестирование API через Postman
2.Мобильное тестирование
3.Знание SQL
4.Нагрузочное тестирование в Jmeter
 ESC + : wq + Enter

 12. Сделать коммит в одну строку.=== git add . | git commit -m "Create new files"

 13. Отправить сразу 2 файла на внешний репозиторий.=== git push

 14. На веб интерфейсе создать файл bug_report.txt ===
В нужном репозитории нажимаем Add file - Create new file в названии указываем bug_report.txt

 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done

 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
Название: Не работает кнопка отправки заказа.
Как воспроизвести?
1. Открыть сайт *.
2. Нажать по ссылке *.
3. Пролистать до поля *.
4. Ввести значение в поле *.
5. Попытаться нажать кнопку отправки заказа.
Фактический результат: кнопка неактивна.
Ожидаемый результат: кнопка нажимается, можно сделать заказ.

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе === Done
 18. Синхронизировать внешний и локальный репозиторий TXT === git pull
